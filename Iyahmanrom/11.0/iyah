#!/bin/bash

#****************************************************************
## Script command exemple :
#iyah $1                    iyah $1 $2
#iyah s1 || iyah s1pucca || iyah s1 linaro || iyah s1 linarof
#iyah s2 ""
#iyah s4 ""

#****************************************************************
## Start Timer :
START=$(date +%s)

#****************************************************************
## Start Total Timer :
DATE_START=$(date +"%s")

#****************************************************************
## Set Basic Parameters :
# set -xv

ROMNAME="IyahmanRom"

case "$1" in
        s1)
            VARIANT="galaxysmtd"
            VER="s1"
            ;;

        s1pucca)
	    VARIANT="galaxysmtd"
            VER="s1"
            ROMNAME="PuccaRom"
            ;;
        s2)
            VARIANT="i9100"
            VER="s2"
            ;;
            
        s2pucca)
	    VARIANT="i9100"
            VER="s2"
            ROMNAME="PuccaRom"
            ;;
            
        s4)
            VARIANT="jflte"
            VER="s4"
            ;;
            
        s4pucca)
	    VARIANT="jflte"
            VER="s4"
            ROMNAME="PuccaRom"
            ;;
            
esac

case "$2" in
	linaro)
	    TOOLCHAIN="-linaro"
	    ;;
	    
	linarof)
	    FORCETOOLCHAIN="on"
	    ;;
	    
esac    

if [ "$3" = "slim" ] ; then
SYSTEMSIZE="on"
fi

if [ "$3" = "clean" ] ; then
MAKECLEAN="on"
fi

CMVER='11.0'
BUILDNAME=$ROMNAME$CMVER-$VARIANT$TOOLCHAIN
CMROMNAME=cm-11-`date -u +%Y%m%d`-UNOFFICIAL-$VARIANT
ROMFOLDER=~/android/rom/iyahmanrom$CMVER
OUTFOLDER=$ROMFOLDER/out/target/product/$VARIANT/
SEMAPHOREFOLDER=~/android/kernel/semaphore/11.0
STUFFFOLDER=~/android/stuff/cyanogenmod11
LINAROFOLDER=~/android/utilitaire/linaro/linaro-toolchain$VER/bin
TEMPORAIREFOLDER=~/android/temporaire/buildtemporaire
export USE_CCACHE=1

#cat ~/Bureau/mesbuildscripts/Iyahmanrom/11.0/iyah 2> ~/Bureau/mesbuildscripts/Iyahmanrom/11.0/compilog$BUILDNAME-`date -u +%Y%m%d`

#****************************************************************
#Add Cherry Pick :
function cherrypick {
if echo -e "\e[31;42m 'add cherry-pick' \e[0m" &&
cd ~/android/rom/iyahmanrom11.0/build/target/product &&
git fetch git://github.com/iyahman/android_build && git cherry-pick 3bae84560bb9276fe8d2b923c4548a16bc56afcc &&
git fetch git://github.com/iyahman/android_build && git cherry-pick 48a6da615516a663b3188a74896c40cabb58f99c
then echo -e "\e[31;42m 'add cherry-pick done' \e[0m"
else echo -e "\e[31;42m 'add cherry-pick failed' \e[0m" && read && spd-say 'SA A MERDÉ'
fi
}

#****************************************************************
##Make mrproper : deletes all the object files AND the intermediate dependency files generated which specify the dependencies of the cpp files.
function fullcleanup {
if echo -e "\e[31;42m 'MAKE CLOBBER' \e[0m" &&
cd $ROMFOLDER && . build/envsetup.sh && breakfast $VARIANT && make mrproper
then echo -e "\e[31;42m 'MAKE CLOBBER DONE' \e[0m"
  if . build/envsetup.sh && breakfast $VARIANT &&
  echo -e "\e[31;42m 'WAITING TO CONNECT $VARIANT TO YOUR PC' \e[0m" && 
  read && adb root && cd $ROMFOLDER/device/samsung/$VARIANT &&
  ./extract-files.sh && $ROMFOLDER/vendor/cm/get-prebuilts
  then echo -e "\e[31;42m 'REINSTALL AFTER CLOBBER DONE' \e[0m"
  else echo -e "\e[31;42m 'REINSTALL AFTER CLOBBER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
else echo -e "\e[31;42m 'MAKE CLOBBER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi
}

#****************************************************************
##Prepare build:
function preparebuild {
if echo -e "\e[31;42m 'BUILD CM$CMVER ROM' \e[0m" &&
cd $ROMFOLDER &&
. build/envsetup.sh && breakfast $VARIANT && export USE_CCACHE=1
then echo -e "\e[31;42m 'BREAKFAST CM$CMVER ROM DONE' \e[0m" &&
  if [ "$TOOLCHAIN" = "-linaro" ] && [ "$VARIANT" = "galaxysmtd" ] ; then
      if echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL'  \e[0m" &&
      cd $ROMFOLDER/kernel/samsung/aries && make mrproper &&
      cd $ROMFOLDER && . build/envsetup.sh && breakfast $VARIANT &&      
      export ARCH=arm ARM_EABI_TOOLCHAIN=$LINAROFOLDER && export USE_CCACHE=1
      then echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL DONE'  \e[0m"
      else echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
  elif [ "$TOOLCHAIN" = "-linaro" ] && [ "$VARIANT" = "i9100" ] ; then
      if echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL'  \e[0m" &&
      cd $ROMFOLDER/kernel/samsung/smdk4412 && make mrproper &&
      cd $ROMFOLDER && . build/envsetup.sh && breakfast $VARIANT &&
      export ARCH=arm ARM_EABI_TOOLCHAIN=$LINAROFOLDER && export USE_CCACHE=1
      then echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL DONE'  \e[0m"
      else echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
  elif [ "$TOOLCHAIN" = "-linaro" ] && [ "$VARIANT" = "jflte" ] ; then 
      if echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL'  \e[0m" &&
      cd $ROMFOLDER/kernel/samsung/jf && make mrproper &&
      cd $ROMFOLDER && . build/envsetup.sh && breakfast $VARIANT &&      
      export ARCH=arm ARM_EABI_TOOLCHAIN=$LINAROFOLDER && export USE_CCACHE=1
      then echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL DONE'  \e[0m"
      else echo -e "\e[31;42m 'SET LINARO TOOLCHAIN FOR $VARIANT CYANOGEN KERNEL FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
  fi
else echo -e "\e[31;42m 'BREAKFAST CM$CMVER ROM FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi
}

function timer {
    END=$(date +%s)
    ELAPSED=$((END - START))
    E_MIN=$((ELAPSED / 60))
    E_SEC=$((ELAPSED - E_MIN * 60))
    echo && printf "${txtgrn}ELAPSED: "
    printf "%d min(s) " $E_MIN
    printf "%d sec(s)\n ${txtrst}" $E_SEC && echo
}

#****************************************************************
## Script speech:
echo -e "\e[31;42m 'HELLO IYAHMAN' \e[0m"
echo -e "\e[31;42m  LAUNCH $ROMNAME$CMVER$TOOLCHAIN BUILD SCRIPT V4.4 FOR $VARIANT WITH GAPPS, CUSTOM APK,'HOST AND GPS CONF' \e[0m"
sleep 1s

#****************************************************************
## Variant selection verification:
if [ "$VARIANT" != "galaxysmtd" ] && [ "$VARIANT" != "i9100" ] && [ "$VARIANT" != "jflte" ]
then spd-say 'bug' && echo -e "\e[31;42m  '############################################################################################################################'
echo '###################################################### PAS DE VARIANTE SELECTIONNÉE POUR $ROMNAME$CMVER ######################################################' 
echo '############################################################################################################################' \e[0m" && read && spd-say 'SA A MERDÉ' && exit
else echo -n
fi

#****************************************************************
## Open ccache and cpu monitor:
#cache
#gnome-system-monitor

#****************************************************************
##Update android SDK:
#android list sdk
#android update sdk --no-ui

if [ "$MAKECLEAN" = "on" ] ; then
 if echo -e "\e[31;42m  '############################################################################################################################'
echo '###################################################### MAKECLEAN ######################################################' 
echo '############################################################################################################################' \e[0m" && 
 cd $ROMFOLDER && make clean 
 then echo -e "\e[31;42m 'MAKECLEAN DONE' \e[0m"
 else echo -e "\e[31;42m 'MAKECLEAN' \e[0m" && read && spd-say 'SA A MERDÉ'
 fi
fi

#****************************************************************
##Installclean : Wipe out the stuff that changes from one make target to another.
if echo -e "\e[31;42m 'INSTALLCLEAN' \e[0m" &&
cd $ROMFOLDER && make installclean && 
find ./out/ -name 'build.prop' | xargs rm &&
echo './out/ -name build.prop | xargs rm done'
#find ./out/ -name "cm_$VARIANT-target_files-eng."*".zip" | xargs rm &&
#echo "./out/ -name cm_$VARIANT-target_files-eng.*.zip | xargs rm done"
then timer && echo -e "\e[31;42m 'INSTALLCLEAN DONE' \e[0m"
else echo -e "\e[31;42m 'INSTALLCLEAN FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Save extracted files :
#if echo -e "\e[31;42m 'SAVE EXTRACTED FILES' \e[0m" &&
#adb root && mkdir ~/android/rom/extractedfiles/$VARIANT &&
#cd ~/android/rom/extractedfiles/$VARIANT/ &&
#sleep 3s && ./extract-files.sh
#then echo -e "\e[31;42m 'SAVE EXTRACTED FILES DONE' \e[0m"
#else echo -e "\e[31;42m 'SAVE EXTRACTED FILES FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
#fi

#****************************************************************
##Remove Previous Kernel Build :
if [ "$VARIANT" = "galaxysmtd" ] ; then
  if echo -e "\e[31;42m 'REMOVING PREVIOUS BUILD IN semaphore/output/' \e[0m" &&
  cd $SEMAPHOREFOLDER/output/galaxys &&
  cp -rfavu IyahmanKernels.zip IyahmanKernelsOld.zip &&
  cp -rfavu IyahmanKernels.tar IyahmanKernelsOld.tar &&
  rm -rfv IyahmanKernels.zip && rm -rfv IyahmanKernels.tar
  then echo -e "\e[31;42m 'REMOVING PREVIOUS BUILD IN semaphore/output/  DONE' \e[0m"
  else echo -e "\e[31;42m 'REMOVING PREVIOUS BUILD IN semaphore/output/  FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
## Clean buildtemporaire:
if echo -e "\e[31;42m 'CLEANING TEMPORALY FILE' \e[0m" && 
rm -rfv $TEMPORAIREFOLDER/* &&
rm -rfv $OUTFOLDER/cm-11-*-UNOFFICIAL-$VARIANT.zip.md5sum
then echo -e "\e[31;42m 'CLEANING TEMPORALY FILE DONE' \e[0m"
else echo -e "\e[31;42m 'CLEANING TEMPORALY FILE FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
#Synchronization :
if echo -e "\e[31;42m 'SYNCHRONIZATION' \e[0m" &&
cd $ROMFOLDER &&
# curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo &&
# chmod a+x ~/bin/repo &&
# repo init -u git://github.com/CyanogenMod/android.git -b cm-$CMVER &&
# echo -e "\e[31;42m 'repo init -u git://github.com/CyanogenMod/android.git -b cm-$CMVER done' \e[0m" &&
repo selfupdate && repo sync -j16
then timer && echo -e "\e[31;42m 'REPO SYNC -j16 DONE ON  git://github.com/CyanogenMod/android.git -b cm-$CMVER' \e[0m"
else 
  if echo -e "\e[31;42m 'REPO SYNC -j16 FAILED ON  git://github.com/CyanogenMod/android.git -b cm-$CMVER' \e[0m" &&
  repo selfupdate && repo sync -j4
  then timer && echo -e "\e[31;42m 'REPO SYNC -j4 DONE THIS TIME ON  git://github.com/CyanogenMod/android.git -b cm-$CMVER' \e[0m"
  else echo -e "\e[31;42m 'REPO SYNC -j4 FAILED THIS TIME AGAIN ON  git://github.com/CyanogenMod/android.git -b cm-$CMVER' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
#replace original system syze by Iyah 
if [ "$VARIANT" = "galaxysmtd" ] && [ "SYSTEMSIZE" = "on" ] ; then
  if echo -e "\e[31;42m 'CHANGE SYSTEM SIZE' \e[0m" &&
  cd $ROMFOLDER/device/samsung/aries-common &&
  sed -i 's/629145600/304087040/g' updater.sh
  then echo -e "\e[31;42m 'CHANGE SYSTEM SIZE FOR GALAXYSMTD DONE' \e[0m"
  else echo -e "\e[31;42m 'CHANGE SYSTEM SIZE FOR GALAXYSMTD FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
##Build CM10 :
if cherrypick && preparebuild && mka bacon ; then
timer && echo -e "\e[31;42m 'BUILD CM$CMVER ROM DONE' \e[0m"
else 
  if echo -e "\e[31;42m 'BUILD CM$CMVER ROM FAILED' \e[0m" && 
  echo -e "\e[31;42m '2ND TRY BUILD CM$CMVER ROM' \e[0m" &&
  rm -rfv $ROMFOLDER/out/target/product/$VARIANT && preparebuild && mka bacon
  then echo -e "\e[31;42m '2ND TRY BUILD CM$CMVER ROM DONE' \e[0m"
  else echo -e "\e[31;42m '2ND TRY BUILD CM$CMVER ROM FAILED' \e[0m"
    if echo -e "\e[31;42m 'FULLCLEANUP FOR REBUILD' \e[0m" &&
    fullcleanup && cherrypick && preparebuild && mka bacon
    then echo -e "\e[31;42m '3ND TRY AFTER FULLCLEANUP BUILD CM$CMVER ROM DONE' \e[0m"
    else echo -e "\e[31;42m '3ND TRY AFTER FULLCLEANUP BUILD CM$CMVER ROM FAILED' \e[0m" &&
    echo -e "\e[31;42m '############################################################################################################################' \e[0m" &&
    echo -e "\e[31;42m '################################################ MANUAL DEBUG REQUIRE ######################################################' \e[0m" &&
    echo -e "\e[31;42m '############################################################################################################################' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
fi

#****************************************************************
##Build Semaphore :
if [ "$VARIANT" = "galaxysmtd" ] ; then
   if echo  -e "\e[31;42m'BUILD IYAHMANKERNEL' \e[0m" &&
   cd $SEMAPHOREFOLDER/samsung-kernel-aries &&
  #cp -rfavu $OUTFOLDERrecovery/root/sbin/recovery $SEMAPHOREFOLDER/ics-ramdisk/jb_combo/ics_rec_init/sbin/
  export USE_CCACHE=1 && ./sbuild.sh galaxys s
  then timer && echo -e "\e[31;42m 'BUILD IYAHMANKERNEL DONE' \e[0m"
  else echo -e "\e[31;42m 'BUILD IYAHMANKERNEL FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
## Save Unofficial Nightly :
if [ "$TOOLCHAIN" != "-linaro" ] || [ "$FORCETOOLCHAIN" != "on" ] ; then
  if echo -e "\e[31;42m 'SAVE UNOFFICIAL NIGHTLY' \e[0m" &&
  cd $OUTFOLDER && cp -rfavu $CMROMNAME.zip  $BUILDNAME-`date -I`.zip
  then echo -e "\e[31;42m 'SAVE UNOFFICIAL NIGHTLY DONE' \e[0m"
  else echo -e "\e[31;42m 'SAVE UNOFFICIAL NIGHTLY FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
## Move Rom And Extra Feature Into Temporaly Folder :
if echo -e "\e[31;42m 'MOVING ROM, GAPPS INTO TEMPORALY FOLDER' \e[0m" &&
cd $OUTFOLDER && mv -fv $BUILDNAME-`date -I`.zip $TEMPORAIREFOLDER &&
cd $STUFFFOLDER && cp -rfavu gapps11.0.zip $TEMPORAIREFOLDER &&
cp -rfavu bootanimation.zip $TEMPORAIREFOLDER
then echo -e "\e[31;42m 'MOVING ROM, GAPP INTO TEMPORALY FOLDER DONE' \e[0m"
  if [ "$VARIANT" = "galaxysmtd" ] ; then
    if cd $STUFFFOLDER && cp -rfavu patch720p4.4.zip $TEMPORAIREFOLDER &&
    cp -rfavu modemril.zip $TEMPORAIREFOLDER &&
    cd $SEMAPHOREFOLDER/output/galaxys &&
    cp -rfavu IyahmanKernels.zip $TEMPORAIREFOLDER
    then echo -e "\e[31;42m 'MOVING KERNEL AND RIL INTO TEMPORALY FOLDER DONE' \e[0m"
    else echo -e "\e[31;42m 'MOVING KERNEL AND RIL INTO TEMPORALY FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
else echo -e "\e[31;42m 'MOVING ROM, GAPPS INTO TEMPORALY FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## unzip Rom And Extra Feature Into Respective Temporaly Folder :
if echo -e "\e[31;42m 'UNZIPPING ROM, GAPPS INTO TEMPORALY FOLDER' \e[0m" &&
cd $TEMPORAIREFOLDER && unzip -q $BUILDNAME-`date -I` -d $BUILDNAME-`date -I`Extract &&
echo 'unzip -q cm-$ROMNAME$CMVER-$VARIANT -d $ROMNAME$CMVER-$VARIANTExtract done' &&
unzip -q gapps11.0 -d gapps11.0Extract
#unzip -q bootanimation -d bootanimationExtract
#echo 'unzip -q bootanimation -d bootanimationExtract done'
then echo -e "\e[31;42m 'UNZIPPING ROM, GAPPS INTO TEMPORALY FOLDER DONE' \e[0m"
  if [ "$VARIANT" = "galaxysmtd" ] ; then
    if echo -e "\e[31;42m 'UNZIPPING KERNEL PATCH720P AND RIL INTO TEMPORALY FOLDER' \e[0m" &&
    unzip -q patch720p4.4 -d patch720p4.4Extract && unzip -q IyahmanKernels -d IyahmanKernelExtract &&
    unzip -q modemril -d modemrilExtract
    then echo -e "\e[31;42m 'UNZIPPING KERNEL PATCH720P AND RIL INTO TEMPORALY FOLDER DONE' \e[0m"
    else echo -e "\e[31;42m 'UNZIPPING KERNEL PATCH720P AND RIL INTO TEMPORALY FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
else echo -e "\e[31;42m 'UNZIPPING ROM, GAPPS INTO TEMPORALY FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi 

# #****************************************************************
# ## Save cyanogenkernel in zip :
# if [ "$TOOLCHAIN" != "-linaro" ] || [ "$FORCETOOLCHAIN" != "on" ] ; then
#   if echo -e "\e[31;42m 'SAVE GALAXYSMTD CYANOGENMODKERNEL' \e[0m" &&
#   cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/ &&
#   cp -rfavu boot.img ~/android/temporaire/ossaturekernel$VARIANT &&
#   cd ~/android/temporaire/ossaturekernel$VARIANT &&
#   zip -qrv ../cyanogenkernel4.4.zip ./ &&
#   cd ~/android/rom && mv -fv cyanogenkernel4.4.zip $OUTFOLDER
#   then echo -e "\e[31;42m 'SAVE GALAXYSMTD CYANOGENMODKERNEL DONE' \e[0m"
#   else echo -e "\e[31;42m 'SAVE GALAXYSMTD CYANOGENMODKERNEL FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
#   fi
# fi

#****************************************************************
## Rename Cmbuild :
if echo -e "\e[31;42m 'PATCHING BUILD.PROP' \e[0m" &&
cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system &&
sed -i "s/ro.cm.display.version="*"."*"."*"/ro.cm.display.version=$BUILDNAME-`date -I`/g" build.prop &&
sed -i "s/ro.product.locale.language="*"."*"."*"/ro.product.locale.language=fr/g" build.prop &&
sed -i "s/ro.product.locale.region="*"."*"."*"/ro.product.locale.region=FR/g" build.prop
then echo -e "\e[31;42m 'PATCHING BUILD.PROP DONE' \e[0m"
else echo -e "\e[31;42m 'PATCHING BUILD.PROP FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Copy Extra Feature Into Rom Temporaly Folder :
if echo -e "\e[31;42m 'COPYING GAPPS AND OTHER STUFF INTO TEMPORALY IYAHMANROM FOLDER' \e[0m" &&
cd $TEMPORAIREFOLDER && cp -rfavu gapps11.0Extract/* $BUILDNAME-`date -I`Extract
#cp -rfavu bootanimationExtract/system/media/bootanimation.zip $ROMNAME$CMVER-$VARIANTExtract/system/media
then echo -e "\e[31;42m 'COPYING GAPPS AND OTHER STUFF INTO TEMPORALY IYAHMANROM FOLDER DONE' \e[0m"
  if [ "$VARIANT" = "galaxysmtd" ] ; then
    if echo -e "\e[31;42m 'COPYING KERNEL PATCH AND RIL INTO TEMPORALY IYAHMANROM FOLDER' \e[0m" &&
    cp -rfavu patch720p4.4Extract/system/* $BUILDNAME-`date -I`Extract/system &&
    cp -rfavu IyahmanKernelExtract/boot.img $BUILDNAME-`date -I`Extract
    #cp -rfavu modemrilExtract/modemril/* $BUILDNAME-`date -I`Extract
    then echo -e "\e[31;42m 'COPYING KERNEL PATCH AND RIL INTO TEMPORALY IYAHMANROM FOLDER DONE' \e[0m"
    else echo -e "\e[31;42m 'COPYING KERNEL PATCH AND RIL INTO TEMPORALY IYAHMANROM FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
else echo -e "\e[31;42m 'COPYING GAPPS AND OTHER STUFF INTO TEMPORALY IYAHMANROM FOLDER FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Delete Unwanted Apk :
if echo -e "\e[31;42m 'DELETING UNWANTED STUFF' \e[0m"
then 
    if [ "$VARIANT" != "jflte" ] ; then
      if cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/app/ &&
      #rm -rfv org.adaway.apk && 
      rm -rfv com.github.chenxiaolong.dualbootpatcher.apk &&
      #rm -rfv com.sfr.android.vvm.apk &&
      rm -rfv FaceLock.apk &&
      rm -rfv PrintSpooler.apk &&
      rm -rfv LiveWallpapersPicker.apk &&
      rm -rfv BasicDreams.apk &&
      rm -rfv PhotoTable.apk &&
      rm -rfv VoicePlus.apk &&
      rm -rfv WhisperPush.apk &&
      cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/priv-app/ &&
      rm -rfv VpnDialogs.apk
      then echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT DONE' \e[0m"
      else echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
    if [ "$VARIANT" != "galaxysmtd" ] ; then
      if cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/app/ &&
      rm -rfv com.semaphore.sm.apk && rm -rfv neldar.bln.control.pro.apk &&
      rm -rfv org.projectvoodoo.controlapp.apk &&
      cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/lib/ &&
      rm -rfv libvoodoo-sound.so && rm -rfv libvoodoo-daemon-tools.so &&
      rm -rfv libvoodoo-kaudio.so
      then echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT DONE' \e[0m"
      else echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
    if [ "$VARIANT" = "galaxysmtd" ] ; then
      if cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/app/ &&
      rm -rfv DSPManager.apk
      then echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT DONE' \e[0m"
      else echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
    if [ "$VARIANT" = "i9100" ] ; then
      if cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/app/ &&
      rm -rfv com.sfr.android.moncompte.apk &&
      rm -rfv com.rhapsody.napster.apk &&
      cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/lib/ &&
      rm -rfv libgnencryption.3.2.1.3.so &&
      rm -rfv libgnlocal_lookup.3.2.1.3.so &&
      rm -rfv libgnmc_aactag.3.2.1.3.so &&
      rm -rfv libgnmc_decoder.3.2.1.3.so &&
      rm -rfv libgnmc_fpx.3.2.1.3.so &&
      rm -rfv libgnmc_id3tag.3.2.1.3.so &&
      rm -rfv libgntransition_detector.3.2.1.3.so
      then echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT DONE' \e[0m"
      else echo -e "\e[31;42m 'DELETING UNWANTED STUFF FOR $VARIANT FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
  if echo -e "\e[31;42m 'DELETING UNWANTED CYANOGENMOD STUFF' \e[0m" &&
  cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/app/ &&
  # dictionnaire clavier android
  rm -rfv LatinIME.apk &&
  #apollo
  rm -rfv Apollo.apk &&
  #black hole
  rm -rfv Galaxy4.apk &&
  #boite à outils SIM
  rm -rfv Stk.apk &&
  #Bulles
  rm -rfv NoiseField.apk &&
  #calculatrice
  #rm -rfv Calculator.apk &&
  #Holospiral
  rm -rfv HoloSpiralWallpaper.apk &&
  #CM file manager
  rm -rfv CMFileManager.apk &&
  #magic smoke wallpaper
  rm -rfv MagicSmokeWallpapers.apk &&
  #movie studio
  rm -rfv VideoEditor.apk &&
  #navigateur
  rm -rfv Browser.apk &&
  #phase beam
  rm -rfv PhaseBeam.apk &&
  #diffusions cellulaires
  rm -rfv CellBroadcastReceiver.apk &&
  #fond d'ecran animé
  rm -rfv LiveWallpapers.apk &&
  #fond d'ecran cyanogen
  rm -rfv CMWallpapers.apk &&
  #fond d'ecran de visualisation
  rm -rfv VisualizationWallpapers.apk &&
  # Gallery cm11
  rm -rfv Gallery2.apk &&
  # camera cm11
  #rm -rfv Camera2.apk &&
  cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/priv-app/ &&
  #cm updater
  rm -rfv CMUpdater.apk &&
  #pico tts
  rm -rfv PicoTts.apk &&
  #reconnaissance vocal
  rm -rfv VoiceDialer.apk &&
  #trebuchet
  rm -rfv Trebuchet.apk &&
  cd $TEMPORAIREFOLDER/$BUILDNAME-`date -I`Extract/system/tts/ &&
  rm -rfv lang_pico
  then echo -e "\e[31;42m 'DELETING UNWANTED CYANOGENMOD STUFF DONE' \e[0m"
  else echo -e "\e[31;42m 'DELETING UNWANTED CYANOGENMOD STUFF FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
echo -e "\e[31;42m 'DELETING UNWANTED STUFF DONE' \e[0m"
fi

#****************************************************************
## Zip Rom In Temporaly Folder:
if echo -e "\e[31;42m 'ZIPPING IYAHMANROM' \e[0m" &&
cd $TEMPORAIREFOLDER && rm -rfv $BUILDNAME-`date -I`.zip &&
cd $BUILDNAME-`date -I`Extract && zip -qrv ../$BUILDNAME-`date -I`.zip ./
then echo -e "\e[31;42m 'ZIPPING IYAHMANROM DONE' \e[0m"
else echo -e "\e[31;42m 'ZIPPING IYAHMANROM FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Move rom To Final Folder :
if echo -e "\e[31;42m 'MOVING IYAHMANROM INTO FINAL DIRECTORY' \e[0m" &&
cd $TEMPORAIREFOLDER && mv -fv $BUILDNAME-`date -I`.zip $OUTFOLDER
then echo -e "\e[31;42m 'MOVING IYAHMANROM INTO FINAL DIRECTORY DONE' \e[0m" 
else echo -e "\e[31;42m 'MOVING IYAHMANROM INTO FINAL DIRECTORY FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Dual Boot :
if [ "$VARIANT" = "jflte" ] ; then 
  if echo -e "\e[31;42m 'PATCH FOR DUALBOOT I9505' \e[0m" &&
  cd $OUTFOLDER && cp -f $BUILDNAME-`date -I`.zip $TEMPORAIREFOLDER &&
  cd $TEMPORAIREFOLDER && mv -f $BUILDNAME-`date -I`.zip $CMROMNAME.zip
  cd ~/android/utilitaire/DualBootPatcher && ./patch-file.sh $TEMPORAIREFOLDER/$CMROMNAME.zip &&
  cd $TEMPORAIREFOLDER && mv -fv $CMROMNAME"_dual".zip $BUILDNAME-`date -I`"_dualboot".zip &&
  mv $BUILDNAME-`date -I`"_dualboot".zip $OUTFOLDER
  then timer && echo -e "\e[31;42m 'PATCH FOR DUALBOOT I9505 DONE' \e[0m" 
  else echo -e "\e[31;42m 'PATCH FOR DUALBOOT I9505 FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
  fi
fi

#****************************************************************
## Sign cm-$ROMNAME$CMVER-$VARIANT :
if echo -e "\e[31;42m 'SIGNING ZIP' \e[0m" &&
cd $OUTFOLDER && openssl pkcs8 -in $ROMFOLDER/build/target/product/security/testkey.pk8 -inform DER -nocrypt &&
java -Xmx2048m -jar $ROMFOLDER/out/host/linux-x86/framework/signapk.jar -w $ROMFOLDER/build/target/product/security/testkey.x509.pem $ROMFOLDER/build/target/product/security/testkey.pk8 $BUILDNAME-`date -I`.zip $BUILDNAME-`date -I`-signed.zip 
then timer && echo -e "\e[31;42m 'SIGNING ZIP DONE' \e[0m"
  if [ "$VARIANT" = "jflte" ] ; then 
    if echo -e "\e[31;42m 'SIGNING ZIP' \e[0m" &&
    cd $OUTFOLDER && openssl pkcs8 -in $ROMFOLDER/build/target/product/security/testkey.pk8 -inform DER -nocrypt &&
    java -Xmx2048m -jar $ROMFOLDER/out/host/linux-x86/framework/signapk.jar -w $ROMFOLDER/build/target/product/security/testkey.x509.pem $ROMFOLDER/build/target/product/security/testkey.pk8 $BUILDNAME-`date -I`"_dualboot".zip $BUILDNAME-`date -I`"_dualboot"-signed.zip 
    then timer && echo -e "\e[31;42m 'SIGNING DUALBOOT ZIP DONE' \e[0m" 
    else  echo -e "\e[31;42m 'SIGNING DUALBOOT ZIP FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
else echo -e "\e[31;42m 'SIGNING ZIP FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

#****************************************************************
## Zipalign $BUILDNAME-`date -I` :
if echo -e "\e[31;42m 'ZIPALIGNING' \e[0m" &&
cd ~/android/utilitaire/sdk/tools/ && zipalign -f -v 4 $OUTFOLDER$BUILDNAME-`date -I`-signed.zip $OUTFOLDER$BUILDNAME-`date -I`-signed-zipaligned.zip
then timer && echo -e "\e[31;42m 'ZIPALIGNING DONE' \e[0m"
  if [ "$VARIANT" = "jflte" ] ; then 
    if echo -e "\e[31;42m 'ZIPALIGNING DUALBOOT' \e[0m" &&
    cd ~/android/utilitaire/sdk/tools/ && zipalign -f -v 4 $OUTFOLDER$BUILDNAME-`date -I`"_dualboot"-signed.zip $OUTFOLDER$BUILDNAME-`date -I`"_dualboot"-signed-zipaligned.zip
    then timer && echo -e "\e[31;42m 'ZIPALIGNING  DUALBOOT DONE' \e[0m"
    else echo -e "\e[31;42m 'ZIPALIGNING  DUALBOOT FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
    fi
  fi
else echo -e "\e[31;42m 'ZIPALIGNING FAILED' \e[0m"
fi

#****************************************************************
## Clean buildtemporaire:
if echo -e "\e[31;42m 'CLEANING TEMPORALY FILE' \e[0m" &&
rm -rfv $TEMPORAIREFOLDER/* &&
cd $OUTFOLDER && rm -rfv cm_$VARIANT-ota-*.zip &&
rm -rfv $BUILDNAME-`date -I`.zip && rm -rfv $BUILDNAME-`date -I`-signed.zip &&
cd ~/Bureau/mesbuildscripts/Iyahmanrom/11.0 &&
rm -rfv compilog$BUILDNAME-`date -u +%Y%m%d`
then echo -e "\e[31;42m 'CLEANING TEMPORALY FILE DONE' \e[0m"
  if [ "$VARIANT" = "galaxysmtd" ] ; then
    if echo -e "\e[31;42m 'CLEANING OLD SEMAPHORE KERNEL' \e[0m" &&
    cd $SEMAPHOREFOLDER/output/galaxys && rm -rfv IyahmanKernelsOld.zip &&
    rm -rfv IyahmanKernelsOld.tar
    then echo -e "\e[31;42m 'CLEANING OLD SEMAPHORE KERNEL DONE' \e[0m"
    else echo -e "\e[31;42m 'CLEANING OLD SEMAPHORE KERNEL FAILED' \e[0m"
    fi
  fi
  if [ "$VARIANT" = "jflte" ] ; then
    if echo -e "\e[31;42m 'CLEANING DUALBOOT TEMPORALY FILES' \e[0m" &&
    cd $ROMFOLDER/out/target/product/jflte/ && rm -rfv $BUILDNAME-`date -I`"_dualboot".zip &&
    rm -rfv $BUILDNAME-`date -I`"_dualboot"-signed.zip
    then echo -e "\e[31;42m 'CLEANING DUALBOOT TEMPORALY FILES DONE' \e[0m"
    else echo -e "\e[31;42m 'CLEANING DUALBOOT TEMPORALY FILES FAILED' \e[0m"
    fi
  fi
#****************************************************************
##clean after linaro build:
  if [ "$TOOLCHAIN" = "-linaro" ] || [ "$FORCETOOLCHAIN" = "on" ] ; then
  echo -e "\e[31;42m 'CLEAN KERNEL DIRECTORY AFTER LINARO BUILD'  \e[0m"
    if [ "$VARIANT" = "galaxysmtd" ] ; then
      if cd $ROMFOLDER/kernel/samsung/aries && make mrproper
      then echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD DONE'  \e[0m"
      else echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
    if [ "$VARIANT" = "i9100" ] ; then
      if cd $ROMFOLDER/kernel/samsung/smdk4412 && make mrproper
      then echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD DONE'  \e[0m"
      else echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
    if [ "$VARIANT" = "jflte" ] ; then 
      if cd $ROMFOLDER/kernel/samsung/jf && make mrproper
      then echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD DONE'  \e[0m"
      else echo -e "\e[31;42m 'CLEAN $VARIANT KERNEL DIRECTORY AFTER LINARO BUILD FAILED'  \e[0m" && read && spd-say 'SA A MERDÉ'
      fi
    fi
echo -e "\e[31;42m 'CLEAN KERNEL DIRECTORY AFTER LINARO BUILD DONE'  \e[0m"
fi
else echo -e "\e[31;42m 'CLEANING TEMPORALY FILE FAILED' \e[0m" && read && spd-say 'SA A MERDÉ'
fi

echo -e "\e[31;42m '############################################################################################################################' \e[0m"
echo -e "\e[31;42m '###################################################### BUILD TERMINÉ #######################################################' \e[0m"
echo -e "\e[31;42m '############################################################################################################################' \e[0m"

#****************************************************************
## Report TOTAL timer:
DATE_END=$(date +"%s")
echo
DIFF=$(($DATE_END - $DATE_START))
echo $ROMNAME$CMVER pour $VARIANT fini en "$(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds."

#****************************************************************
## Open Final Build Directory:
spd-say 'BUILD SUCCESFULL' && nautilus $OUTFOLDER

#fakeroot bash -c sleep 5m; pm-suspend-hybrid
#exit